@page "/Adm/ApplicationRole/Roles/{CurrentId}"
@inject ApplicationRoleController SrvRole

<WrAuth PageName="ContactViewStd"><MainContent>  

    <div class="fix-possition">
        <WrPnlElm>
            <ControlQuickAccess>
                    <input type="button" class="btn btn bnt-style-general" @onclick="@Cancel" value="Cancel">
                    <input type="button" class="btn bnt-style-general" @onclick="@UpdateRoles" value="Update">
                        <label for="Code" class="control-lable">
                        &nbsp;&nbsp; &nbsp;&nbsp;  @_objRole.Code &nbsp;&nbsp; @_objRole.NormalizedName </label>
            </ControlQuickAccess>
        </WrPnlElm>
    </div> 

	<div>
	
<ul class="myUL">
  <li><span class="caret">Beverages</span>
    <ul class=" ul-treev nested">
      <li>Water</li>
      <li>Coffee</li>
      <li><span class="caret">Tea</span>
        <ul class=" ul-treev nested">
          <li>Black Tea</li>
          <li>White Tea</li>
          <li><span class="caret">Green Tea</span>
            <ul class=" ul-treev nested">
              <li>Sencha</li>
              <li>Gyokuro</li>
              <li>Matcha</li>
              <li>Pi Lo Chun</li>
            </ul>
          </li>
        </ul>
      </li>  
    </ul>
  </li>
</ul>
   <button class="btn bnt-style-general" @onclick="Test" data-toggle="tooltip" title="Next Page"></button>
               	
	</div>
</MainContent></WrAuth>  
 @code{

    #region  Declare
        [Parameter] public string CurrentId { get; set; }
        private string SelectedRow { get; set; } = "";       
      //  private List<ApplicationRole> ApplicationRole_List; 
      //  private WrDataGrid<ApplicationRole> grid_DiffRoleList;   

            [Parameter] public string SelectedId { get; set;}="0";       
        private ApplicationRole _objRole = new ApplicationRole(); 
    #endregion  Declare
    
    #region  BlazorMethods
       protected override void OnInitialized()
        {
            SrvRole.Init_UserRoleEdit();
            _objRole =  SrvRole.GetApplicationRoleById(CurrentId); // A 111
             // VGetUserRole_List = SrvUser.GetUserRoleById(CurrentId).ToList();
           // ApplicationRole_List=SrvRole.GetApplicationRole().ToList();
           // DiffRoleList   = ApplicationRole_List.Where(x => !VGetUserRole_List.Any(y => x.Id == y.RoleId)).ToList();
        } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("TreeView22");
    }
    #endregion  BlazorMethods

        private void SelectedRowMeth(string pSelectedRow)
        {
            SelectedRow = pSelectedRow;
            SelectedId= SelectedRow;
           // AppData.UserRoleEditRoleCode = SrvRole.GetApplicationRoleCodeById(SelectedRow);
        }

     private void Test()
        {
           JSRuntime.InvokeVoidAsync("TreeView22");
        }

     private void UpdateRoles()
        {
          //  SrvUser.UpdateRoles(objUser);
            NavManager.NavigateTo("/Adm/ApplicationRole/ViewStd/"+CurrentId);
        }
        void Cancel()
        {
            NavManager.NavigateTo("/Adm/ApplicationRole/ViewStd/"+CurrentId);
        }
    
    }


    