@page "/Adm/ApplicationUserViewStd/{Id}"
@inject ApplicationUserController ApplicationUserController

@* @attribute [Authorize(Roles = "@ApplicationUserViewStd_Role")]   *@

@* <AuthorizeView Roles="@AppData.GetAccessRights("ApplicationUserViewStd")"> *@




@if (ApplicationUserList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <WrDataGrid @ref="grid"
                  DataItems="ApplicationUserList"
                  Columns="columnsDefinition"
                  SelectedRow="SelectedRowMeth"
                  UniqIdOfRecord="Id"
                  ColumnsToExcludeCSV="Id"
                  PageNameTitle="@trs.GetTranslation("ApplicationUserViewStd",@AppData.ActiveUser,"Adm")"
                  Paging="@(new PagingConfig
                            {
                                Enabled = true,
                                CustomPager = false,
                                PageSize = @AppData.rowNumMid
                            })">

        <ControlMenu>
            <a @onclick="@(args => AddNew("/Adm/ApplicationUserAdd"))" value="Add" class="menu-itms">Add</a>
            <a @onclick="@(args => ViewOrEdit("/Adm/ApplicationUserEdit/", selectedRow,"Edit"))" class="menu-itms">Edit</a>
            <a @onclick="@(args => Delete("/Adm/ApplicationUserDelete/", selectedRow))" class="menu-itms">Delete</a>
        </ControlMenu>

        <ControlQuickAccess>
            &nbsp &nbsp
            @*<input style="text-align: center; " />*@
            <WrSrchDGrid OnSearchTextChanged="OnApplicationUserSearchTextChanged" > </WrSrchDGrid>
            <button class="btn bnt-style-general" @onclick="@(args => FindSelectedRec())" data-toggle="tooltip" title="Search"><span class="fa fa-search" aria-hidden="true" id="search-input"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => CleanSearchBox())" data-toggle="tooltip" title="Clean search box"><span class="fa fa-chevron-left" aria-hidden="true"></span></button>
            &nbsp &nbsp

            <button class="btn bnt-style-general" @onclick="@(args => NavManager.NavigateTo(AppData.BaseUrlUri))" data-toggle="tooltip" title="Beck"><span class="fa fa-backward" aria-hidden="true"></span> Beck</button>
            <button class="btn bnt-style-general" @onclick="@(args => AddNew("/Adm/ApplicationUserAdd"))" data-toggle="tooltip" title="Add"><span class="fa fa-plus" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ViewOrEdit("/Adm/ApplicationUserEdit/", selectedRow,"View"))" data-toggle="tooltip" title="View"><span class="fa fa-file" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ViewOrEdit("/Adm/ApplicationUserEdit/", selectedRow,"Edit"))" data-toggle="tooltip" title="Edit"><span class="fa fa-pencil" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => Delete("/Adm/ApplicationUserDelete/", selectedRow))" data-toggle="tooltip" title="Delete"><span class="fa fa-trash" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => FilterData())" data-toggle="tooltip" title="Filter"><span class="fa fa-filter" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ExportToExcel())" data-toggle="tooltip" title="Export to Excel"><span class="fa fa-file-excel-o" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ViewOrEdit("/Adm/UserRoleEdit/", selectedRow,"EditRoles"))" data-toggle="tooltip" title="EditUserRoles"><span class="fa fa-hand-paper-o" aria-hidden="true"></span></button>

          
        </ControlQuickAccess>
       
    </WrDataGrid>
}

@* </AuthorizeView> *@

    @* ------------------------------------------------------------------------------*@
    @code  {

  

    [Parameter]
    public string Id { get; set; }
   // ApplicationUser objEmp = new ApplicationUser();
    private List<ApplicationUser> ApplicationUserList;
    private List<ApplicationUser> filteredApplicationUserList { get; set; }
    private WrDataGrid<ApplicationUser> grid;
        
    private List<ColumnDefinition> columnsDefinition;

    private string selectedRow { get; set; } = "";

        private int CurrentPage { get; set; } = 1;

    private void OnApplicationUserSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
        string searchValue = changeEventArgs.Value.ToString();
        ApplicationUserList = ApplicationUserController.GetApplicationUserByFiled(searchValue,Id);
        GoToFirstPage();
        GetCurrentPage();         
    }


    private void SelectedRowMeth(string pSelectedRow)
    {
        
        selectedRow = pSelectedRow;
        AppData.ApplicationUserIdSlcd= selectedRow;
        AppData.ApplicationUserCode = ApplicationUserController.GetApplicationUserCodeById(selectedRow);
               //   AppData.ApplicationUserPageNum = grid.CurrentPage.ToString();
    }

    protected void FindSelectedRec()
    {
        //JSRuntime.InvokeVoidAsync("msgbox","Test");
        string searchValue = AppData.ApplicationUserCode;
        ApplicationUserList = ApplicationUserController.GetApplicationUserByFiled(searchValue,Id);
        GoToFirstPage();
        GetCurrentPage();
        
    }

    protected void CleanSearchBox()
    {
        //JSRuntime.InvokeVoidAsync("msgbox","Test");
        string searchValue = AppData.ApplicationUserCode = "";
        ApplicationUserList = ApplicationUserController.GetApplicationUserByFiled(searchValue,Id);
        GoToFirstPage();
        GetCurrentPage();
        selectedRow = "";
        
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Initilize();
        //  selectedRow = AppData.ApplicationUserIdSlcd;
        AppData.ActivePageName="View-ApplicationUser";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private void Initilize()
    {
        if (columnsDefinition == null)
        {
            columnsDefinition = new List<ColumnDefinition>();
            columnsDefinition.AddRange(
                new ColumnDefinition[] {

                    new ColumnDefinition { DataField = "Code", Caption="Code" },
                    new ColumnDefinition { DataField = "UserName", Caption="UserName" },
                    new ColumnDefinition { DataField = "FullName", Caption="FullName" },
                    new ColumnDefinition { DataField = "CreatedDate", Caption="CreatedDate" },
                       
                    }
            );
        }

        ApplicationUserList = ApplicationUserController.GetApplicationUserById2(Id).ToList();

    }

    private void GoToFirstPage()
    {
     grid.GoToFirstPage();
     CurrentPage=1;    
    }
   
    private void GetCurrentPage()
    {
        CurrentPage= grid.GetCurrentPage();        
    }

    

    private void ViewOrEditFlag(string pViewOrEdit)
    {
        if(pViewOrEdit.ToUpper()=="VIEW")
        {
            AppData.readonlyMain1=true;
            AppData.readonlyMain2=true;
            AppData.readonlyOther=true;
        }
        else if(pViewOrEdit.ToUpper()=="EDIT")
        {
            AppData.readonlyMain1=true;
            AppData.readonlyMain2=true;
            AppData.readonlyOther=false; 
        }
        else if(pViewOrEdit.ToUpper()=="EditRoles".ToUpper())
        {
             AppData.readonlyMain1=true;
            AppData.readonlyMain2=true;
            AppData.readonlyOther=true;
        }
    }

    protected void NavigateTo(string pNavLink)
    {
        NavManager.NavigateTo(pNavLink);
    }
    protected void AddNew(string pNavLink)
    {
        ViewOrEditFlag("EDIT");
         NavManager.NavigateTo(pNavLink);
    }

    protected void ViewOrEdit(string pNavLink, string p_selectedRow, string pViewOrEdit)
    {
        ViewOrEditFlag(pViewOrEdit);

        if (string.IsNullOrEmpty(p_selectedRow)   || p_selectedRow=="0") //String.IsNullOrEmpty(p_selectedRow)
        {
            JSRuntime.InvokeVoidAsync("msgbox",StatCls.GetTranslation("NotSelectedRecordMsg",@AppData.ActiveUser,"Msg"));
        }
        else
        {
            NavManager.NavigateTo(pNavLink + p_selectedRow);
        }
    }

    protected void Delete(string pNavLink, string p_selectedRow)
    {
        if (string.IsNullOrEmpty(p_selectedRow)) //String.IsNullOrEmpty(p_selectedRow)
        {
            JSRuntime.InvokeVoidAsync("msgbox",StatCls.GetTranslation("NotSelectedRecordMsg",@AppData.ActiveUser,"Msg"));
        }
        else
        {
            NavManager.NavigateTo(pNavLink + p_selectedRow);
        }

    }

    protected void ExportToExcel()
    {
        // JSRuntime.InvokeVoidAsync("msgbox", "ExportToExcel");
        ApplicationUserController.GenerateExcel(JSRuntime,Id);
    }

    protected void FilterData()
    {
        JSRuntime.InvokeVoidAsync("msgbox", "FilterData");
        // ApplicationUserController.FilterData(JSRuntime);
    }

    }
