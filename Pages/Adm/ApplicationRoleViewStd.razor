@page "/Adm/ApplicationRoleViewStd/{Id}"
@inject ApplicationRoleController SrvRole
@inject NavigationManager NavManager

@* @attribute [Authorize(Roles = "@ApplicationRoleViewStd_Role")]   *@
@* <AuthorizeView Roles="@AppData.GetAccessRights("ApplicationRoleViewStd")"> *@

@if (RoleList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGridComp @ref="grid"
                  DataItems="RoleList"
                  Columns="@SrvRole.clmDef_RoleStd"
                  SelectedRow="SelectedRowMeth"
                  UniqIdOfRecord="Id"
                  ColumnsToExcludeCSV="Id,Name"
                  PageNameTitle="@trs.GetTranslation("ApplicationRoleViewStd",@AppData.ActiveUser,"Adm")"
                  Paging="@(new PagingConfig
                            {
                                Enabled = true,
                                CustomPager = false,
                                PageSize = @AppData.rowNumMid
                            })">

        <ControlMenu>
            <a @onclick="@(args => AddNew("/Adm/ApplicationRoleAdd"))" value="Add" class="menu-itms">Add</a>
            <a @onclick="@(args => ViewOrEdit("/Adm/ApplicationRoleEdit/", selectedRow,"Edit"))" class="menu-itms">Edit</a>
            <a @onclick="@(args => Delete("/Adm/ApplicationRoleDelete/", selectedRow))" class="menu-itms">Delete</a>
        </ControlMenu>

        <ControlQuickAccess>
            &nbsp &nbsp
            @*<input style="text-align: center; " />*@
            <DGridColumnComp  OnSearchTextChanged="Role_SrchTxt"> </DGridColumnComp>
            <button class="btn bnt-style-general" @onclick="@(args => FindSelectedRec())" data-toggle="tooltip" title="Search"><span class="fa fa-search" aria-hidden="true" id="search-input"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => CleanSearchBox())" data-toggle="tooltip" title="Clean search box"><span class="fa fa-chevron-left" aria-hidden="true"></span></button>
            &nbsp &nbsp
            <button class="btn bnt-style-general" @onclick="@(args => NavManager.NavigateTo(AppData.BaseUrlUri))" data-toggle="tooltip" title="Beck"><span class="fa fa-backward" aria-hidden="true"></span> Beck</button>
            <button class="btn bnt-style-general" @onclick="@(args => AddNew("/Adm/ApplicationRoleAdd"))" data-toggle="tooltip" title="Add"><span class="fa fa-plus" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ViewOrEdit("/Adm/ApplicationRoleEdit/", selectedRow,"View"))" data-toggle="tooltip" title="View"><span class="fa fa-file" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ViewOrEdit("/Adm/ApplicationRoleEdit/", selectedRow,"Edit"))" data-toggle="tooltip" title="Edit"><span class="fa fa-pencil" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => Delete("/Adm/ApplicationRoleDelete/", selectedRow))" data-toggle="tooltip" title="Delete"><span class="fa fa-trash" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => FilterData())" data-toggle="tooltip" title="Filter"><span class="fa fa-filter" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ExportToExcel())" data-toggle="tooltip" title="Export to Excel"><span class="fa fa-file-excel-o" aria-hidden="true"></span></button>
            <button class="btn bnt-style-general" @onclick="@(args => ViewOrEdit("/Adm/EditRoles/", selectedRow,"EditRoles"))" data-toggle="tooltip" title="EditRoles"><span class="fa fa-hand-paper-o" aria-hidden="true"></span></button>

         </ControlQuickAccess>      
    </DataGridComp>
}

@* </AuthorizeView> *@

    @* ------------------------------------------------------------------------------*@
    @code  {

   #region     Declare_Region
    [Parameter]
    public string Id { get; set; }
    private string selectedRow { get; set; } = "";
    private int CurrentPage { get; set; } = 1;
    private List<ApplicationRole> RoleList;
    private DataGridComp<ApplicationRole> grid;

   #endregion  Declare_Region
    
    #region    LifeСycle_Region

        protected override void OnInitialized()
        {
            base.OnInitialized();
            SrvRole.Init_RoleViewStd();
            
            RoleList = SrvRole.GetApplicationRoleById2(Id).ToList();
            //  selectedRow = AppData.ApplicationRoleIdSlcd;
            AppData.ActivePageName="View-ApplicationRole";
        }
        protected override void OnAfterRender(bool firstRender)
        {
          base.OnAfterRender(firstRender);
        }

        protected override void OnParametersSet()
        {
          base.OnParametersSet();
        }
    #endregion LifeСycle_Region_Region

    #region    Event_Region

        private void Role_SrchTxt(ChangeEventArgs changeEventArgs)
        {
            string searchValue = changeEventArgs.Value.ToString();
            RoleList = SrvRole.GetApplicationRoleByFiled(searchValue);
            GoToFirstPage();
            GetCurrentPage();         
        }
        private void SelectedRowMeth(string pSelectedRow)
        {
            
            selectedRow = pSelectedRow;
            AppData.ApplicationRoleIdSlcd= selectedRow;
            AppData.ApplicationRoleCode = SrvRole.GetApplicationRoleCodeById(selectedRow);
                //   AppData.ApplicationRolePageNum = grid.CurrentPage.ToString();
        }
        protected void FindSelectedRec()
        {
            //JSRuntime.InvokeVoidAsync("msgbox","Test");
            string searchValue = AppData.ApplicationRoleCode;
            RoleList = SrvRole.GetApplicationRoleByFiled(searchValue,Id);
            GoToFirstPage();
            GetCurrentPage();        
        }
        protected void CleanSearchBox()
        {
            //JSRuntime.InvokeVoidAsync("msgbox","Test");
            string searchValue = AppData.ApplicationRoleCode = "";
            RoleList = SrvRole.GetApplicationRoleByFiled(searchValue,Id);
            GoToFirstPage();
            GetCurrentPage();
            selectedRow = "";        
        }
    
    
       
        private void GoToFirstPage()
        {
        grid.GoToFirstPage();
        CurrentPage=1;    
        }  
        private void GetCurrentPage()
        {
            CurrentPage= grid.GetCurrentPage();        
        }  
        private void ViewOrEditFlag(string pViewOrEdit)
        {
            if(pViewOrEdit.ToUpper()=="VIEW")
            {
                AppData.readonlyMain1=true;
                AppData.readonlyMain2=true;
                AppData.readonlyOther=true;
            }
            else if(pViewOrEdit.ToUpper()=="EDIT")
            {
                AppData.readonlyMain1=true;
                AppData.readonlyMain2=true;
                AppData.readonlyOther=false; 
            }
        }
        protected void NavigateTo(string pNavLink)
        {
            NavManager.NavigateTo(pNavLink);
        }
        protected void AddNew(string pNavLink)
        {
            ViewOrEditFlag("EDIT");
            NavManager.NavigateTo(pNavLink);
        }
        protected void ViewOrEdit(string pNavLink, string p_selectedRow, string pViewOrEdit)
        {
            ViewOrEditFlag(pViewOrEdit);

            if (string.IsNullOrEmpty(p_selectedRow)   || p_selectedRow=="0") //String.IsNullOrEmpty(p_selectedRow)
            {
                JSRuntime.InvokeVoidAsync("msgbox",GlobVarStat.rowNotChoosed_msg);
            }
            else
            {
                NavManager.NavigateTo(pNavLink + p_selectedRow);
            }
        }
        protected void Delete(string pNavLink, string p_selectedRow)
        {
            if (string.IsNullOrEmpty(p_selectedRow)) //String.IsNullOrEmpty(p_selectedRow)
            {
                JSRuntime.InvokeVoidAsync("msgbox",GlobVarStat.rowNotChoosed_msg);
            }
            else
            {
                NavManager.NavigateTo(pNavLink + p_selectedRow);
            }

        }
        protected void ExportToExcel()
        {
            // JSRuntime.InvokeVoidAsync("msgbox", "ExportToExcel");
            SrvRole.GenerateExcel(JSRuntime,Id);
        }
        protected void FilterData()
        {
            JSRuntime.InvokeVoidAsync("msgbox", "FilterData");
            // SrvRole.FilterData(JSRuntime);
        }

    #endregion Event_Region

}
