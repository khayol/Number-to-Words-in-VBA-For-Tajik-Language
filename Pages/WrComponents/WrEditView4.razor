@typeparam TItem
@*  NOT WORKING PROPERLY *@
@using System.Reflection
@inject GnrSrv GnrSrv 

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
<div class="notification is-danger">
    <button class="delete" @onclick="@(() => { this.ErrorMessage = string.Empty; })"></button>
    @ErrorMessage
</div> 
}
else
{
<div class="panel-elements">
    <div class="row ">
        <div>

            <div class="form-group ">
        
                @if (ControlMenu != null )
                {
                    <div class="dropdown main-menu-place">
                        <button class="btn btn-primary bnt-style-general  bnt-main-menu" ><span class="oi oi-menu" aria-hidden="true"></span></button>
                        <div class="dropdown-content"> 
                        @ControlMenu
                        </div>
                    </div>
                }else{
                @* <a>Inner Control Menu  should Developer</a> *@
                }
               
                 @if (ControlQuickAccess != null )
                {
                 if (ControlMenu != null){
                    @ControlQuickAccess
                 }else{
                  <a>&nbsp; &nbsp; &nbsp;</a>  @ControlQuickAccess
                 }
                }else{
                  @* <a>Inner ControlQuickAccess should Developer</a> *@
                }

               <a>&nbsp; &nbsp; &nbsp;</a>
                @if (Paging != null && Paging.Enabled)
                {
                    @if (Paging.CustomPager)
                    {
                        @CustomPager 
                    }
                    else
                    {

                    }
                }
                  
                @if (PageNameTitle != null )
                {
                    <a>&nbsp;&nbsp;</a> @trs.GetTranslation("PageName",@AppData.ActiveUser,"General")<a>&#58;&nbsp;</a><input readonly="true" class="page-name" data-toggle="tooltip" title="@PageNameTitle"  @bind="@PageNameTitle"/>
                }else{
                        @* @PageName *@
                }
                 
            </div>

        </div>
    </div>
</div>

<div class="table-style ">         
  
        @foreach (var item in DataItems.Skip(Paging.NumOfItemsToSkip(CurrentPage)).Take(Paging.NumOfItemsPerPage(DataItems.Count())))
        {
            string IdOfRecord = @item.GetType().GetProperty(this.UniqIdOfRecord).GetValue(item).ToString(); //member.Name
       
            <div>
                @foreach (var column in Columns)
                {
                     string thisModel= StatCls.GetModelNameFromObject(@DataItems);
                    string IdOfFieldKey="";
                    if (!string.IsNullOrEmpty(column.SelectedFieldKey)){
                     IdOfFieldKey= @item.GetType().GetProperty(column.SelectedFieldKey).GetValue(item)?.ToString()  ?? GlobVarStat.nullval; //member.Name
                    }
                    var cellValue= FormatItemValue(item, column,IdOfRecord);                                
               
                    if (column.Alignment != Alignment.NotSet)
                    {
                        if (StatCls.IsContains(ColumnsToExcludeCSV,column.DataField)==false )
                        {
                        
                         <p style="@(FontStyleHeader(column))" class="@(AlignmentClass(column)) theader-stl" >
                             @trs.GetTranslation(@column.Caption,@AppData.ActiveUser?.ToString() ?? "",thisModel)
                         </p>
                         <input readonly="@readonlyOther" class="form-control" id="FirstName" @bind="@cellValue" /> 
  
                        }
                    }
                    else
                    {
                        if (StatCls.IsContains(ColumnsToExcludeCSV,column.DataField)==false)
                        {                          
                           <p style="@(FontStyleHeader(column))" class="@(AlignmentClass(column)) theader-stl"  >
                            @trs.GetTranslation(@column.Caption,@AppData.ActiveUser?.ToString() ?? "",thisModel)
                            </p>              
                           <input readonly="@readonlyOther" class="form-control" id="FirstName" @bind="@cellValue" /> 
                        }
                    }
                }
            </div>
        }


</div>

}


@code  { 


    
#region  Declare_Region

  private bool readonlyMain1 {get;set;}=false;
    private bool readonlyMain2 {get;set;}=false;
    private bool readonlyOther {get;set;}=false; 


    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string BaseUrlUri { get; set; }
    [Parameter]
    public string ColumnsToExcludeCSV { get; set; }

    [Parameter]
    public string UniqIdOfRecord { get; set; }

    [Parameter]
    public string PageNameTitle { get; set; }
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    private string ErrorMessage;
    [Parameter]
    public RenderFragment ControlMenu { get; set; }

    [Parameter]
    public RenderFragment ControlQuickAccess { get; set; }

       [Parameter]
    public PagingConfig Paging { get; set; } = new PagingConfig();

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    [Parameter]
    public RenderFragment PageName { get; set; }

    [Parameter]
    public List<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public EventCallback<string> SelectedRow { get; set; } 
    
#endregion  Declare_Region

        protected override void OnInitialized()
     {


        readonlyMain1=AppData.readonlyMain1;
        readonlyMain2=AppData.readonlyMain2;
        readonlyOther=AppData.readonlyOther;

    }

 
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
     
    }

  

    #region Html_Markup_Cleanup

     private string AlignmentClass(ColumnDefinition column)
    {
        string alignmentClass = string.Empty;

        switch (column.Alignment)
        {
            case Alignment.Left:
                alignmentClass = "align-left";
                break;
            case Alignment.Center:
                alignmentClass = "align-center";
                break;
            case Alignment.Right:
                alignmentClass = "align-right";
                break;
            case Alignment.NotSet:
            default:
                alignmentClass = string.Empty;
                break;
        }

        return alignmentClass;
    }

    private string FontStyleHeader(ColumnDefinition column)
    {
        string fontStyle = string.Empty;
        string linkStyle=GlobVarStat.linkStyle; // dark Blue
        string staticDataStyle=GlobVarStat.staticDataStyle;

        switch (column.DataType)
        {
            
            case DataType.Collection: 
            case DataType.List:
            case DataType.LinkLine: 
            case DataType.RelatedData: 
                fontStyle = linkStyle; 
                break;
            case DataType.NotSet: 
                fontStyle =staticDataStyle;
                break;
            default:
                fontStyle =staticDataStyle;
                break;
        }

        return fontStyle;
    }

    private string FormatItemValue(TItem item, ColumnDefinition column, string pIdOfRecord)
    {
        #nullable enable
                string? value = string.Empty;
        #nullable restore
        if ((!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet) || column.DataType == DataType.List || column.DataType == DataType.Collection || column.DataType == DataType.RelatedData)
        {
            switch (column.DataType)
            {
                case DataType.Date:
                case DataType.DateTime:
                      value = typeof(TItem).GetProperty(column.DataField).GetValue(item)?.ToString() ?? GlobVarStat.nullval;
                    //value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                    //value=DateTime.Parse(value).ToString("dd-MM-yyyy");
                    //value=DateTime.ParseExact(value,"dd-MM-yyyy", CultureInfo.CreateSpecificCulture("fr-FR")).ToString();
                   if (value == GlobVarStat.date_1900 || value == GlobVarStat.date_0001)
                    {
                    value = GlobVarStat.nullval; //"nullval";
                    }
                    break;
                case DataType.Boolean:
                    value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                    break;
                case DataType.Currency:
                    value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                    break;
                case DataType.RelatedData:
               
                @*
                 Тут нужно дорабативать собственный механизм EF Core и надо избавиться от посторонных функции
                GnrSrv.GetReleatedData  и GnrSrv.ExistDataORNotFlag
                *@
                
                @* 
                typeof(TItem).ToString()
                =Woorj.Data.IndOrg.Individual
                
                typeof(TItem).GetProperty(column.DataField).ToString()
                =Woorj.Data.Dir.Gender Gender
                
                typeof(TItem).GetProperty(column.DataField).GetValue(item)?.ToString()
                =Woorj.Data.Dir.Gender	

                 *@

                // value = typeof(TItem).GetProperty(column.DataField).GetValue(item)?.ToString() ?? GlobVarStat.nullval;
                //string x = typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString();
                
                @* string x = typeof(TItem).GetProperty("GenderId").GetValue(item).ToString();
                Console.WriteLine("===================================");
                Console.WriteLine("column.DataField= "+column.DataField);
                Console.WriteLine("column.SelectedField= "+column.SelectedField);
                Console.WriteLine("column.SelectedFieldKey= "+column.SelectedFieldKey);
                Console.WriteLine("x= "+x);
                 *@
                 
                    string SelectedFieldKey = typeof(TItem).GetProperty(column.SelectedFieldKey).GetValue(item)?.ToString() ?? GlobVarStat.nullval;
                    value= GnrSrv.GetReleatedData(column.DataField, column.SelectedField, SelectedFieldKey);                     
                    break;
                case DataType.Collection:
                case DataType.List:
                  value= GnrSrv.ExistDataORNotFlag(column.DataField, typeof(TItem).Name+"Id", pIdOfRecord); 
                   break;
                default:
                    break;
            }
        }
        else
        {
            value = typeof(TItem).GetProperty(column.DataField).GetValue(item)?.ToString() ?? GlobVarStat.nullval;
              
              if (GnrSrv.IsValidDateTime(value)){
              value=DateTime.Parse(value).ToString("dd-MM-yyyy");
              }

            if (value == GlobVarStat.date_1900 || value == GlobVarStat.date_0001)
            {
                value = GlobVarStat.nullval; //"nullval";
            }

            switch (column.DataType)
            {
               case DataType.Collection:
                case DataType.List:
                    value =GlobVarStat.dataArrEmpty; //"{...}";
                    break;
                case DataType.RelatedData:
                  value =  typeof(TItem).GetProperty(column.DataField).GetValue(item)?.ToString() ?? GlobVarStat.nullval; //"RelatedData_Null";//
                    break;    
                default:
                    break;
            }

        }

        return value;
    }

    #endregion Html_Markup_Cleanup
}
