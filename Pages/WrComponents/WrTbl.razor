@typeparam TItem
@using System.Reflection

@if (memberInfo != null && memberInfo.Length > 0)
{
    <div class="table-style">
        <table class="@($"table-bordered  {this.TblCssClass}")">
            <thead class="thead-light" style="background-color:lightgray">
                <tr>
                    @foreach (var member in memberInfo)
                    { //Contains
                        @if (member.MemberType == MemberTypes.Property &&
                             StatCls.IsContains(ColumnsToExcludeCSV,member.Name)==false
                            ) //непоказывать колонки(Причеслите их как CSV например "Id,Name")
                        {                   
                            <th>
                                @member.Name
                            </th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in this.Items)
                {
                    string IdOfRecord = @item.GetType().GetProperty(this.UniqIdOfRecord).GetValue(item).ToString(); //member.Name

                    <tr @onclick="() => ClickOnTheRecord(IdOfRecord)">
                        @foreach (var member in memberInfo)
                        {
                            @if (member.MemberType == MemberTypes.Property &&
                                 StatCls.IsContains(ColumnsToExcludeCSV,member.Name)==false
                                )
                            {
                                 <td>
                                    @item.GetType().GetProperty(member.Name).GetValue(item)
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
        </div>
        }

        @code {
            MemberInfo[] memberInfo;

        protected override void OnParametersSet()
        {
            base.OnParametersSet();

            if (Items != null && Items.Count > 0)
            {
                Type typeofItem = this.Items[0].GetType();
                memberInfo = typeofItem.GetMembers();
            }
        }

        [Parameter]
        public List<TItem> Items { get; set; }

        [Parameter]
        public string ColumnsToExcludeCSV { get; set; }
            
        [Parameter]
        public string UniqIdOfRecord { get; set; }

        [Parameter]
        public string TblCssClass { get; set; }

        [Parameter]
        public EventCallback<string> SelectedRow { get; set; }


        public async Task ClickOnTheRecord(string pIdOfRecord)
        {
            // Console.WriteLine($"tr clicked at index {pIdOfRecord}!");
            await SelectedRow.InvokeAsync(pIdOfRecord);
            await JSRuntime.InvokeVoidAsync("SelectedRowColorChange");
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            // await JSRuntime.InvokeVoidAsync("ToolTipEnable");
            await JSRuntime.InvokeVoidAsync("SelectedRowColorChange");
            // return base.OnAfterRenderAsync(firstRender);
        }

        }
