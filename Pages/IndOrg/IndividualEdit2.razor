@page "/IndOrg/IndividualEdit2/{CurrentID}"
@inject IndividualController IndividualController
@inject GenderController GenderController
@inject CountryController CountryController


@inject GnrSrv GnrSrv 

@* @attribute [Authorize(Roles = "Admin")] *@
@if (CountryList == null)
    {
    <p><em>Loading...</em></p>
    @* <div class="spinner"></div> *@
    }
    else
    {

<AuthorizeView Roles="@admSer.GetAccessRights("IndividualEdit")">


 <div class="fix-possition">
<WrPnlElm>
    <ControlQuickAccess>
            @* <input type="button" class="btn bnt-style-general" @onclick="@RefrashPage" value="Refrash Page"> *@
            <input type="button" class="btn bnt-style-general" @onclick="@UpdateIndividual" value="Update">
            <input type="button" class="btn btn bnt-style-general" @onclick="@Cancel" value="Cancel">
            <button class="btn bnt-style-general" @onclick="@(args => NavManager.NavigateTo(AppData.IndividualLink))" data-toggle="tooltip" title="Beck"><span class="fa fa-backward" aria-hidden="true"></span> Beck</button>
    </ControlQuickAccess>
</WrPnlElm>
</div> 

<div class="under-cls">
<form>
    <div class="row">

        <div class="col-md-8 field-content">

            <div class="form-group">
                <label for="Code" class="control-lable">Code</label>
                <input readonly=@readonlyMain1 form="Code" class="form-control" @bind="@objIndividual.Code" />
            </div>
            <div class="form-group">
                <label for="FirstName" class="control-lable">FirstName</label>
                <input readonly="@readonlyOther" form="FirstName" class="form-control" @bind="@objIndividual.FirstName" />
            </div>

            <div class="form-group">
                <label for="SecondName" class="control-lable">SecondName</label>
                <input readonly="@readonlyOther" form="SecondName" class="form-control" @bind="@objIndividual.SecondName" />
            </div>

            <div class="form-group">
                <label for="LastName" class="control-lable">LastName</label>
                <input readonly="@readonlyOther" form="LastName" class="form-control" @bind="@objIndividual.LastName" />
            </div>

            <div class="form-group">
                <label for="FirstNameEN" class="control-lable">FirstNameEN</label>
                <input readonly="@readonlyOther" form="FirstNameEN" class="form-control" @bind="@objIndividual.FirstNameEN" />
            </div>

            <div class="form-group">
                <label for="SecondNameEN" class="control-lable">SecondNameEN</label>
                <input readonly="@readonlyOther" form="SecondNameEN" class="form-control" @bind="@objIndividual.SecondNameEN" />
            </div>

            <div class="form-group">
                <label for="LastNameEN" class="control-lable">LastNameEN</label>
                <input readonly="@readonlyOther" form="LastNameEN" class="form-control" @bind="@objIndividual.LastNameEN" />
            </div>

            <div class="form-group">
                <label for="BirthDay" class="control-lable">BirthDay</label>
                <input readonly="@readonlyOther" form="BirthDay" class="form-control" @bind="@objIndividual.BirthDay" />
            </div>

            <div class="form-group">
                <label for="Address" class="control-lable">Address</label>
                <input readonly="@readonlyOther" form="Address" class="form-control" @bind="@objIndividual.Address" />
            </div>

            <div class="form-group">
                <label  class="control-lable">Contact</label>
                <label  class="control-clct">@GnrSrv.ExistDataORNotFlag("Contact", "IndividualId", @CurrentID)</label>
                 <input disabled="@readonlyOther" type="button" class="btn btn bnt-style-general" @onclick="@(args => GoToCollection("/IndOrg/ContactViewStd/",CurrentID))"  value="Edit">
            </div

            <div class="form-group">
                <label for="PassCode" class="control-lable">PassCode</label>
                <input readonly="@readonlyOther" form="PassCode" class="form-control" @bind="@objIndividual.PassCode" />
            </div>
             
            <div class="form-group">
            <label for="Gender" class="control-lable">Gender</label> 
                <select disabled="@readonlyOther" class="form-control selectpicker" @bind="@objIndividual.GenderId">
                    <option>--select--</option>
                    @if (GenderList == null)
                    {
                     <p><em>Loading...</em></p>
                    @* <div class="spinner"></div> *@
                    }
                    else
                    {
                    @foreach (var item in GenderList)
                    {
                     <option value="@item.Id">@item.Name</option> // Blazor needs to know what values it binds to!
                    }
                    }
                </select>
            </div>
              
            <div class="form-group">
                <label  class="control-lable">BirthPlace</label>
                <input disabled="@readonlyOther" type="button" class="btn btn bnt-style-general" @onclick="@(args => GoToCollection("/Dir/CountryViewStd/",@objIndividual.BirthPlace_CountryId.ToString(),"Individual",@objIndividual.Id,"BirthPlace_CountryId"))"  value="Edit">
                <input readonly="true" form="BirthPlace" class="form-control" value="@GnrSrv.GetReleatedData("Country", "Name", @objIndividual.BirthPlace_CountryId.ToString())" />
             
            </div

            <div class="form-group">
                <label for="CreatedDate" class="control-lable">CreatedDate</label>
                <input  readonly="@readonlyMain1" class="form-control" @bind="@objIndividual.CreatedDate" />
            </div>


        </div>

    </div>

 </form>

</div>
                    
 </AuthorizeView>
 }
@code{


    [Parameter]
    public string CurrentID { get; set; }
    Individual objIndividual = new Individual();
    private List<Gender> GenderList;
    private List<Country> CountryList;

    private bool readonlyMain1 {get;set;}=false;
    private bool readonlyMain2 {get;set;}=false;
    private bool readonlyOther {get;set;}=false;  

     private void RefrashPage()
     {
             StateHasChanged();
     }
        protected override void OnInitialized()
   // protected override async Task OnInitializedAsync()
    {
       // objIndividual = await Task.Run(() => IndividualController.GetById_FirstOrDefault(Convert.ToInt32(CurrentID)));
        objIndividual = IndividualController.GetById_FirstOrDefault(Convert.ToInt32(CurrentID));
        GenderList =  GenderController.GetGender();
        CountryList =  CountryController.GetCountry();

        readonlyMain1=AppData.readonlyMain1;
        readonlyMain2=AppData.readonlyMain2;
        readonlyOther=AppData.readonlyOther;

    }
    public void GoToCollection(string pLinkAddress,string pIdOfRecord)
    {           
      AppData.BaseUrlUri=NavManager.Uri;//"/IndOrg/IndividualEdit/"+pIdOfRecord;
      NavManager.NavigateTo(pLinkAddress+"0");
      AppData.flg_ChoosedRow=1;
      AppData.ChoosedRowId=int.Parse(pIdOfRecord);
      
    }

    public void GoToCollection(string pLinkAddress,string pIdOfRecord,  string pChoosedEntityName, 
                               int pChoosedEntityId, string pChoosedEntityFK)
    {           
        AppData.BaseUrlUri=NavManager.Uri;
        NavManager.NavigateTo(pLinkAddress+"0");
        AppData.flg_ChoosedRow=1;
        AppData.ChoosedRowId=int.Parse(pIdOfRecord);

        AppData.ChoosedEntityName=pChoosedEntityName; 
        AppData.ChoosedEntityId=pChoosedEntityId; 
        AppData.ChoosedEntityFK=pChoosedEntityFK;
      
    }

    protected void UpdateIndividual()
    {

        IndividualController.Update(objIndividual);
        NavManager.NavigateTo(AppData.IndividualLink);
    }
    void Cancel()
    {
        NavManager.NavigateTo(AppData.IndividualLink);
    }
}