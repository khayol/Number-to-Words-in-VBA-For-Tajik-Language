@page "/IndOrg/IndividualEdit/{CurrentID}"
@inject IndividualController IndividualController
@inject GenderController GenderController
@inject CountryController CountryController
@inject GnrSrv GnrSrv 

<AuthorizeView Roles="@admSer.GetRolesList("IndividualEdit")" Context="authContext">
  <Authorized>

<EditForm Model="@objIndividual" OnValidSubmit="@UpdateIndividual" OnInvalidSubmit="@OnInvalidSubmitMsg" Context="formContext">  
    <FluentValidationValidator />  @* <DataAnnotationsValidator />   It's Standard method of validations *@
    <ValidationSummary/>
    
    <WrPnlElm>
        <ControlQuickAccess>
                <input type="submit" class="btn bnt-style-general"  value="Update">
                <input   type="button" class="btn btn bnt-style-general" @onclick="@Cancel" value="Cancel">
            @* <button class="btn bnt-style-general" @onclick="@(args => NavManager.NavigateTo(AppData.IndividualLink))"
                data-toggle="tooltip" title="Beck"><span class="fa fa-backward" aria-hidden="true"></span> Beck</button>
            *@
        </ControlQuickAccess>
    </WrPnlElm>

    <WrFormBody>
        <FormElements>
            <WrFieldInt TransEntity="Individual" FieldCaption="Code" 
            ReadonlyOpt="readonlyMain1" Val="@objIndividual.Code" />

           <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="FirstName"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.FirstName"/> 

            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="SecondName"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.SecondName"/>

            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="LastName"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.LastName"/>

            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="FirstNameEN"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.FirstNameEN"/>

            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="SecondNameEN"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.SecondNameEN"/>

            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="LastNameEN"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.LastNameEN"/>    

           
           <WrFieldDateTime TransEntity="Individual" FieldCaption="BirthDay">
               <RenderFrg>
                   <InputDate readonly="@readonlyOther"  form="BirthDay"  class="form-control"  @bind-Value="@objIndividual.BirthDay" @bind-Value:format="dd/MM/yyyy"/>
               </RenderFrg>
           </WrFieldDateTime>
            
            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="Address"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.Address"/>

            <WrFieldArray TransEntity="Individual" FieldCaption="Contact" >
                <RenderFrg>
                <label  class="control-clct">@GnrSrv.ExistDataORNotFlag("Contact", "IndividualId", @CurrentID)</label>
                <input disabled="@readonlyOther" type="button" class="btn btn bnt-style-general" @onclick="@(args => GoToCollection("/IndOrg/ContactViewStd/",CurrentID))"  value="Edit">
                </RenderFrg>
            </WrFieldArray>

            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="PassSerial"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.PassSerial"/>
    
            <WrFieldStr ReadonlyThis="readonlyOther" FieldCaption="PassCode"
            TransEntity="Individual"  @bind-BindingValue ="@objIndividual.PassCode"/>
 
            <div class="form-group">
                     <WrLebel TransEntity="Individual" FieldCaption="Gender"/>
                          <select disabled="@readonlyOther" class="form-control selectpicker" @bind="@objIndividual.GenderId">
                            <option>--select--</option>
                        @foreach (var item in GenderList)
                        {
                        <option value="@item.Id">@item.Name</option> // Blazor needs to know what values it binds to!
                        }
                        </select>   
            </div> 
                 

@* This is not working with records where the BirthPlace is Null/ I should fix it *@
@*                 
                <div class="form-group">
                    <WrLebel TransEntity="Individual" FieldCaption="BirthPlace" />
                    <input disabled="@readonlyOther" type="button" class="btn btn bnt-style-general" @onclick="@(args => GoToCollection("/Dir/CountryViewStd/",@objIndividual.BirthPlace_CountryId.ToString(),"Individual",@objIndividual.Id,"BirthPlace_CountryId"))"  value="Edit">
                    <input readonly="true" form="BirthPlace" class="form-control" value="@GnrSrv.GetReleatedData("Country", "Name", @objIndividual.BirthPlace_CountryId.ToString())" />
                </div>
     *@
                <div class="form-group">
                    <WrLebel TransEntity="Individual" FieldCaption="CreatedDate"/>
                    <input  readonly="@readonlyMain1" class="form-control" @bind="@objIndividual.CreatedDate" />
                </div>

        </FormElements>      
    </WrFormBody>    
    </EditForm>    
</Authorized>
 <NotAuthorized>
       <WrPageNotFound/>
 </NotAuthorized>

  </AuthorizeView>


@code{

    [Parameter]
    public string CurrentID { get; set; }
    Individual objIndividual = new Individual();
   
    private List<Country> CountryList;
    
    private List<Gender> GenderList;
    //private WrCombo<Gender> grid;    

    private bool readonlyMain1 {get;set;}=false;
    private bool readonlyMain2 {get;set;}=false;
    private bool readonlyOther {get;set;}=false;  

     private void RefrashPage()
     {
             StateHasChanged();
     }
    protected override void OnInitialized()
    {
       // objIndividual = await Task.Run(() => IndividualController.GetById_FirstOrDefault(Convert.ToInt32(CurrentID)));
        objIndividual = IndividualController.GetById_FirstOrDefault(Convert.ToInt32(CurrentID));
        GenderList =  GenderController.GetGender();
        CountryList =  CountryController.GetCountry();

        readonlyMain1=AppData.readonlyMain1;
        readonlyMain2=AppData.readonlyMain2;
        readonlyOther=AppData.readonlyOther;

    }
    public void GoToCollection(string pLinkAddress,string pIdOfRecord)
    {           
      AppData.BaseUrlUri=NavManager.Uri;//"/IndOrg/IndividualEdit/"+pIdOfRecord;
      NavManager.NavigateTo(pLinkAddress+"0"); // change "0" to the Contact Id in Individual Table
      AppData.flg_ChoosedRow=1;
      AppData.ChoosedRowId=int.Parse(pIdOfRecord);      
    }

    public void GoToCollection(string pLinkAddress,string pIdOfRecord,  string pChoosedEntityName, 
                               int pChoosedEntityId, string pChoosedEntityFK)
    {           
        AppData.BaseUrlUri=NavManager.Uri;
        NavManager.NavigateTo(pLinkAddress+"0");
        AppData.flg_ChoosedRow=1;
        AppData.ChoosedRowId=int.Parse(pIdOfRecord);

        AppData.ChoosedEntityName=pChoosedEntityName; 
        AppData.ChoosedEntityId=pChoosedEntityId; 
        AppData.ChoosedEntityFK=pChoosedEntityFK;
      
    }

    protected void UpdateIndividual()
    {
        IndividualController.Update(objIndividual);
        NavManager.NavigateTo(AppData.IndividualLink);
    }
    void Cancel()
    {
        NavManager.NavigateTo(AppData.IndividualLink);
    }

     void OnInvalidSubmitMsg()
    {
       // Console.WriteLine("OnInvalidSubmit");
    }
}