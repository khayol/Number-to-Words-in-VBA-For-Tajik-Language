@page "/IndOrg/Individual/ViewStdClassic"
@inject IndividualController individualListidualService

<div class="panel-elements">
    <div class="row ">
        <div class="col-md-4">
            <div class="form-group ">
                @* Functionality Menu*@
                <div class="dropdown">
                    <button class="btn bnt-style-general"><span class="oi oi-media-play" aria-hidden="true"></span></button>
                    <div class="dropdown-content">
                        <a @onclick="@(args => AddNew())" value="Add">Add</a>
                        <a @onclick="@(args => Edit(SelectedRow.ToString()))">Edit</a>
                        <a @onclick="@(args => Delete(SelectedRow.ToString()))">Delete</a>
                    </div>
                </div>
                @* Functionality Buttons*@
           
                <button class="btn bnt-style-general" @onclick="@(args => AddNew())" data-toggle="tooltip" title="Add"><span class="oi oi-plus" aria-hidden="true"></span></button>
                <button class="btn bnt-style-general" @onclick="@(args => Edit(SelectedRow.ToString()))" data-toggle="tooltip" title="Edit" ><span class="oi oi-pencil" aria-hidden="true"></span></button>
                <button class="btn bnt-style-general" @onclick="@(args => Delete(SelectedRow.ToString()))" data-toggle="tooltip" title="Delete"  ><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                <input type="button" class="btn bnt-style-general" @onclick="@(args => Delete(SelectedRow.ToString()))" value="">
                <label for="fname"> Row: @SelectedRow</label>
            </div>
        </div>
    </div>
</div>

@if (_individualList == null)
{
    <p><em>Loading...</em></p>
@* <div class="spinner"></div> *@
}
else
{




    <div class="table-style">
        <table class="table table-bordered " id="rowClick">
            <thead class="thead-light theader-stl ">
                <tr>
                    <th>Code</th>
                    <th>FullName</th>

                    <th>FullNameEN</th>
                    <th>BirthDay</th>
                    <th>Address</th>
                    <th>PassCode</th>
                    <th>PhoneNumber</th>
                    <th>Email</th>
                    <th>Gender</th>
                    <th>CreatedDate</th>
                    @* *@

                    @*<th>Edit</th>
        <th>Delete</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var emp in _individualList)
                {
                    IncRow++;
                    if (IncRow == 1)
                    {
                    }


                <tr @onclick="() => TrClickedAtIndex(emp.Id)" class="tdata-stl">
                    <td>@emp.Code</td>
                    <td>@emp.FullName</td>

                    <td>@emp.FullNameEN</td>
                    <td>@emp.BirthDay</td>
                    <td>@emp.Address</td>
                    <td>@emp.PassCode</td>
                    <td>@emp.Gender.Name</td>
                    <td>@emp.CreatedDate</td>
                    @*
                    <td>
                    <a class="nav-link" href="cli/edit/@emp.Id">edit</a>
                    </td>
                    <td>
                    <a class="nav-link" href="cli/delete/@emp.Id">delete</a>
                    </td>
                    *@
                </tr>
                }
            </tbody>
        </table>
    </div>
}
@code{
    List<Individual> _individualList;
    private int IncRow { get; set; } = 0;
    private int SelectedRow { get; set; } = 0;


    protected override async Task OnInitializedAsync()
    {
        _individualList = await Task.Run(() => individualListidualService.Get());

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {     
        // await JSRuntime.InvokeVoidAsync("ToolTipEnable");
        await JSRuntime.InvokeVoidAsync("SelectedRowColorChange");
       // return base.OnAfterRenderAsync(firstRender);
    }

    private async Task TrClickedAtIndex(int index)
    {
        // Console.WriteLine($"tr clicked at index {index}!");
        SelectedRow = index;
        await JSRuntime.InvokeVoidAsync("SelectedRowColorChange");
    }

    private void AddNew()
    {
        NavManager.NavigateTo("/IndOrg/Individual/Add");
    }

    private void Edit(string pSelectedRow)
    {
        if ( int.Parse(pSelectedRow)<=0) //String.IsNullOrEmpty(p_selectedRow)
        {
            JSRuntime.InvokeVoidAsync("msgbox", "Please, choose the record before running the command");
        }
        else {
            NavManager.NavigateTo("/IndOrg/Individual/Edit/" + pSelectedRow);
        }
    }
    private void Delete(string pSelectedRow)
    {
        if (int.Parse(pSelectedRow) <= 0) //String.IsNullOrEmpty(p_selectedRow)
        {
            JSRuntime.InvokeVoidAsync("msgbox", "Please, choose the record before running the command");
        }
        else
        {
            NavManager.NavigateTo("/IndOrg/Individual/Delete/" + pSelectedRow);
        }

    }

    void Cancel()
    {
        NavManager.NavigateTo("/IndOrg/View");
    }

}

