#pragma checksum "E:\NewProjects\01\Woorj\WrComponents\WrDataGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b7934843087fa3700d67abdfbb0d104d555b5b40"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Woorj.WrComponents
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\NewProjects\01\Woorj\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\NewProjects\01\Woorj\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\NewProjects\01\Woorj\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\NewProjects\01\Woorj\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\NewProjects\01\Woorj\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\NewProjects\01\Woorj\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\NewProjects\01\Woorj\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\NewProjects\01\Woorj\_Imports.razor"
using Toolbelt.Blazor.HeadElement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\NewProjects\01\Woorj\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\NewProjects\01\Woorj\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.Pages.TESTS.L22;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.Pages.TESTS.WrComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.WrComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.Data.WrComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.Data.IndOrg;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\NewProjects\01\Woorj\_Imports.razor"
using Woorj.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\NewProjects\01\Woorj\WrComponents\WrDataGrid.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
    public partial class WrDataGrid<TItem> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 97 "E:\NewProjects\01\Woorj\WrComponents\WrDataGrid.razor"
         [Parameter]
    public string ColumnsToExcludeCSV { get; set; }

    [Parameter]
    public RenderFragment ControlMenu { get; set; }

    [Parameter]
    public RenderFragment ControlQuickAccess { get; set; }

    [Parameter]
    public List<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public PagingConfig Paging { get; set; } = new PagingConfig();

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    private string ErrorMessage;



    [Parameter]
    public EventCallback<string> SelectedRow { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // await JSRuntime.InvokeVoidAsync("ToolTipEnable");
        await JSRuntime.InvokeVoidAsync("SelectedRowColorChange");
        // return base.OnAfterRenderAsync(firstRender);

    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ValidateDefinitions();

        // SortData();
    }

    public async Task ClickOnTheRecord(string pIdOfRecord)
    {
        // Console.WriteLine($"tr clicked at index {pIdOfRecord}!");
        await SelectedRow.InvokeAsync(pIdOfRecord);
        await JSRuntime.InvokeVoidAsync("SelectedRowColorChange");

        CurrentPage = int.Parse(AppData.pageNum); //

    }

    private void ValidateDefinitions()
    {
        this.ErrorMessage = string.Empty;

        //if (DataItems == null || DataItems.Count <= 0)
        //{
        //    ErrorMessage = "DataItems is not provided.";
        //    return;
        //}

        var itemProperties = typeof(TItem).GetProperties();
        if ((Columns != null && (itemProperties == null || itemProperties.Count() != Columns.Count)))
        {
            ErrorMessage = "Column definitions don't match the provided data.";
            return;
        }

        if (Columns.Count(x => x.SortDirection != SortDirection.NotSet) > 1)
        {
            ErrorMessage = "Sorting on multiple columns are not supported.";
            return;
        }
    }

    private void SortData(ColumnDefinition sortByColumn = null)
    {
        if (sortByColumn == null) sortByColumn = Columns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
        if (sortByColumn == null) return;

        foreach (var column in Columns)
        {
            if (column.DataField != sortByColumn.DataField) column.SortDirection = SortDirection.NotSet;
        }

        switch (sortByColumn.SortDirection)
        {
            case SortDirection.NotSet:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
            case SortDirection.Asc:
                sortByColumn.SortDirection = SortDirection.Desc;
                break;
            case SortDirection.Desc:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
            default:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
        }

        if (sortByColumn.SortDirection == SortDirection.Asc)
        {

            DataItems.Sort((x, y) => (typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x)?.ToString() ?? "nullval")
                .CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y)?.ToString() ?? "nullval"));
        }
        else
        {
            DataItems.Sort((x, y) => (typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y)?.ToString() ?? "nullval")
                .CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x)?.ToString() ?? "nullval"));
        }

    }

    public void GoToPrevPage()
    {
        CurrentPage = Paging.PrevPageNumber(CurrentPage);
    }

    public void GoToNextPage()
    {
        CurrentPage = Paging.NextPageNumber(CurrentPage, DataItems.Count);
    }

    public int MaxPageNumber { get => Paging.MaxPageNumber(DataItems.Count); }

    #region Html_Markup_Cleanup

    private string SortClass(ColumnDefinition column)
    {
        if (column.SortDirection != SortDirection.NotSet)
        {
            return $"sort {column.SortDirection.ToString().ToLower()}";
        }

        return "no-sort";
    }

    private string AlignmentClass(ColumnDefinition column)
    {
        string alignmentClass = string.Empty;

        switch (column.Alignment)
        {
            case Alignment.Left:
                alignmentClass = "align-left";
                break;
            case Alignment.Center:
                alignmentClass = "align-center";
                break;
            case Alignment.Right:
                alignmentClass = "align-right";
                break;
            case Alignment.NotSet:
            default:
                alignmentClass = string.Empty;
                break;
        }

        return alignmentClass;
    }

    private string FormatItemValue(TItem item, ColumnDefinition column)
    {
#nullable enable
        string? value = string.Empty;
#nullable restore
        if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
        {
            switch (column.DataType)
            {
                case DataType.Date:
                case DataType.DateTime:
                    value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                    break;
                case DataType.Boolean:
                    value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                    break;
                case DataType.Currency:
                    value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                    break;
                default:
                    break;
            }
        }
        else
        {
            value = typeof(TItem).GetProperty(column.DataField).GetValue(item)?.ToString() ?? "nullval";
            if (value == "01/01/1900 00:00:00" || value == "01/01/0001 00:00:00")
            {
                value = "nullval";
            }

        }

        return value;
    }

    #endregion Html_Markup_Cleanup

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppData AppData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
